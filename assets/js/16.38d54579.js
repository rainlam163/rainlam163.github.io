(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{498:function(e,t,v){"use strict";v.r(t);var _=v(4),s=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Vue3.0 在响应性系统升级为 Proxy 机制外，还提供了一套全新的 API，就像 React Hook API 一样，Vue3.0 的全新 API 也是渐进式的，我们依然可以使用 Vue2.x 的 API 去开发，但是官方当然是推荐使用全新的 API 去开发 —— 就像 React 也推荐使用 React Hook 去开发一样。")]),e._v(" "),v("p",[e._v("接下来我会重点从关注点分离的角度去分析一下 Vue3.0 全新 API 带来的编程快感。")]),e._v(" "),v("h2",{attrs:{id:"vue2-x-的开发模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue2-x-的开发模式"}},[e._v("#")]),e._v(" Vue2.x 的开发模式")]),e._v(" "),v("p",[e._v("事实上，Vue 之所以这么受欢迎，主要是因为它的学习门槛极低，因为它的设计初衷是为了迎合传统的 web 开发人员，html + js + css 的模式，从而降低学习成本，快速地为企业带来收益。")]),e._v(" "),v("p",[e._v("web 的传统开发思维就是 html + js + css，而 vue 的单文件组件刚好迎合了这种开发模式，使得 web 开发人员能快速适应，不需要耗费过多的学习成本。")]),e._v(" "),v("p",[e._v("而 vue2.x 的选项式 API 则成了最熟悉的开发模式，组件的 props、data、computed、methods、watch、filters、生命周期钩子（created、mounted ……）等等都以选项的形式出现在组件里，需要定义什么或者需要在对应的生命周期做什么就往对应的选项里添加代码，一切都显得那么自然，几乎不需要思考，非常方便。")]),e._v(" "),v("p",[e._v("然而，真的是这样吗……")]),e._v(" "),v("p",[e._v("在起初，组件逻辑很简单的时候，组件看起来结构和业务逻辑非常清晰，一切都那么简单明了，父子组件之间的数据流向也因为有单项数据流的约定而显得异常清晰。但是，随着需求的迭代，组件要处理的业务逻辑开始越来越复杂，于是，每一个新的需求，就继续往选项里添加代码，一切都很顺理成章，也很顺利地完成了需求迭代。")]),e._v(" "),v("p",[e._v("然而，当测试发现了一个 bug 的时候，你开始从代码里找业务逻辑，看下到底哪里导致的问题。")]),e._v(" "),v("p",[e._v("然后问题就接踵而至：")]),e._v(" "),v("ul",[v("li",[e._v("这个变量怎么这么多地方用到？")]),e._v(" "),v("li",[e._v("到底是哪个地方改变了这个变量的值？")]),e._v(" "),v("li",[e._v("F3跳来跳去，始终无法确定哪里改变了这个变量导致值变了？")]),e._v(" "),v("li",[e._v("我只想里清列表查询的逻辑，但是整个组件所有选项（data、computed、methods、watch、filters……）我几乎都要看一遍？")]),e._v(" "),v("li",[e._v("……")])]),e._v(" "),v("p",[e._v("你发现没有，每次测试提了一个 bug，你都要整个组件从头到尾理一遍逻辑！这不对劲啊！传统的开发，代码不应该是从上往下执行执行的吗？当我要 debug 的时候，我只需要找到对应的代码块，只关注这个地方就行了，其它地方的代码不是我所要关心的。")]),e._v(" "),v("p",[e._v("而且，为什么这个组件随着业务需求的迭代，从一开始的 100 行变成了现在的 1000 行！更可恶的是，因为这种选项式 API 的限制，有些代码在不同的组件间重复写了几次！需求一旦变更，我必须要在所有有这个逻辑的组件里都改一遍！代码的复用性极差！")]),e._v(" "),v("p",[e._v("是的，如果你用 vue2.x 开发过一个业务逻辑错综复杂的应用，我相信你会感同身受。")]),e._v(" "),v("p",[e._v("那么，这个问题难道就没有解决方案了吗？我们来看看尤大大推出的 Vue3 中带来的全新 API —— 组合式 API。")]),e._v(" "),v("h2",{attrs:{id:"vue3-的开发模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue3-的开发模式"}},[e._v("#")]),e._v(" Vue3 的开发模式")])])}),[],!1,null,null,null);t.default=s.exports}}]);